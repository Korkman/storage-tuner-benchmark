#! /bin/sh
#set -u
set -e
{

#   storage-tuner-benchmark - quick but meaningful storage benchmark utility
#   Copyright (C) 2018  Pierre Beck
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

#   Source: https://github.com/Korkman/storage-tuner-benchmark

myVersion="2.1.0"

# trapping "kill 0" to kill subprocesses when interrupted by user
trap "exit 2" INT TERM
trap "kill 0" EXIT

# coordinate colors
if [ "$STB_COLORS" = "" ]; then
	if [ "$4" = "" ]; then
		if [ -t 1 ]; then
			# not passed as env, not as internal argument $4 and is interactive terminal
			STB_COLORS="yes"
		else
			STB_COLORS="no"
		fi;
	else
		STB_COLORS="$4"
	fi;
fi;

# use STB_TESTGROUP to access deprecated / special interest test groups
if [ "$STB_TESTGROUP" = "" ]; then
	if [ "$5" = "" ]; then
		STB_TESTGROUP="current"
	else
		STB_TESTGROUP="$5"
	fi;
fi;

if [ "$1" = "" ] || [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	# if no arguments given or is "help", show usage
	echo "storage-tuner-benchmark $myVersion"
	
	echo "Quick but meaningful storage benchmark utility"
	echo ""
	echo "Usage: storage-tuner-benchmark <target> [path|cleanup [testname|cleanup] ]"
	echo ""
	echo "target        Required. Any of:"
	echo "              here            run on local system"
	echo "              user@hostname   run on remote system via ssh"
	echo ""
	echo "path          Optional. Base directory where a new directory will "
	echo "              be created containing test files."
	echo "              Default: home directory"
	echo ""
	echo "testname      Optional. Name of a specific test in quotes. Requires a full run before."
	echo "              Default: run all tests"
	echo ""
	echo "cleanup       Optional. Deletes test files directory. Run this"
	echo "              when done tuning."
	echo ""
	echo "Pre-requisites: fio, the benchmark tool, will be installed via apt-get"
	echo "or yum when missing."
	echo ""
	echo "Examples:"
	echo ""
	echo "              storage-tuner-benchmark here /mnt"
	echo "              Creates \"stb-testdir\" in /mnt and runs all tests."
	echo ""
	echo "              storage-tuner-benchmark here /mnt \"16 files, 1 thread each, rnd 16k writes, simple, o_sync\""
	echo "              Repeats the test named \"16 files, 1 thread each, rnd 16k writes, simple, o_sync\"."
	echo ""
	echo "              storage-tuner-benchmark here /mnt cleanup"
	echo "              Will rm -rf /mnt/stb-testdir"
	echo ""
	
	# defuse trap and exit
	trap "" EXIT
	exit 1

elif [ "$1" != "here" ]; then
	# execute on remote host when target is not "here"
	ssh "$1" "/bin/sh -- /dev/stdin here \"$2\" \"$3\" \"$STB_COLORS\" \"$STB_TESTGROUP\"" < "$0"
	
	# defuse trap and exit
	trap "" EXIT
	exit 0

else
	# execute tests
	
	# initialize variables
	myHostname="$(uname -n)"
	myLastinfo=""
	myDirname="stb-testdir"
	myPath=~
	myFioBasics="--fallocate=none --group_reporting --verify=0 --disable_lat=1 --disable_clat=1 --disable_slat=1 --clat_percentiles=0 --refill_buffers --randrepeat=0"
	fioTL="--runtime=5 --time_based"
	fioMany="$myFioBasics --size=32M --numjobs=16"
	fioOne="$myFioBasics --size=512M --numjobs=1"
	myCleanup=false
	mySpecificTest=""
	myTestsrun=false
	if [ "$STB_COLORS" = "yes" ]; then
		# use colors when interactive terminal
		colorRed='\033[0;31m'
		colorGreen='\033[0;32m'
		colorReset='\033[0m'
	else
		# no colors when output is redirected
		colorRed=''
		colorGreen=''
		colorReset=''
	fi;
	if [ "$2" = "cleanup" ]; then
		myCleanup=true
	elif [ "$2" != "" ]; then
		myPath="$2";
		
		if [ "$3" = "cleanup" ]; then
			myCleanup=true
		elif [ "$3" != "" ]; then
			mySpecificTest="$3"
		fi;
	fi;
	
	# initialize baseline data for HDD and SSD
	myBaselineHDD=$(cat <<'HEREDOC'
storage-tuner-benchmark version 2.1.0-rc1
Testgroup "current"
===   1 file series   ===
1 file, 1 thread, seq 1M writes, simple: 181 write iops (131% HDD)
1 file, 1 thread, rnd 16k writes, simple: 712 write iops (89% HDD)
1 file, 1 thread, rnd 16k writes, simple, take 2: 658 write iops
1 file, 16 threads, rnd 4k writes, posixaio: 351 write iops (100% HDD)
1 file, 16 threads, rnd 8k writes, posixaio: 424 write iops (108% HDD)
1 file, 16 threads, rnd 16k writes, posixaio: 447 write iops (105% HDD)
1 file, 16 threads, rnd 16k writes, posixaio, take 2: 504 write iops
===  16 file series   ===
16 files, 1 thread each, seq 1M writes, simple: 150 write iops (130% HDD)
16 files, 1 thread each, rnd 16k writes, simple: 654 write iops (82% HDD)
16 files, 1 thread each, rnd 16k writes, simple, take 2: 627 write iops
16 files, 1 thread each, rnd 16k writes, posixaio: 466 write iops (121% HDD)
16 files, 16 threads each, rnd 16k writes, posixaio: 537 write iops (89% HDD)
16 files, 16 threads each, rnd 16k writes, posixaio, take 2: 501 write iops
===   O_SYNC series   ===
1 file, 1 thread, rnd 16k writes, simple, o_sync: 155 write iops (107% HDD)
1 file, 16 threads, rnd 16k writes, posixaio, o_sync: 241 write iops (138% HDD)
16 files, 1 thread each, rnd 16k writes, simple, o_sync: 505 write iops (107% HDD)
16 files, 16 threads each, rnd 16k writes, posixaio, o_sync: 509 write iops (106% HDD)
===    read series    ===
1 file, 1 thread, seq 1M reads, simple: 3738 read iops (211% HDD)
1 file, 16 threads, rnd 16k reads, posixaio: 171 read iops (99% HDD)
16 files, 1 thread each, seq 1M reads, simple: 4045 read iops (147% HDD)
16 files, 1 thread each, rnd 16k reads, posixaio: 470 read iops (118% HDD)
16 files, 16 threads each, rnd 16k reads, posixaio: 496 read iops (114% HDD)
=== native aio series ===
1 file, 16 threads, rnd 16k writes, native aio: 613 write iops (87% HDD)
16 files, 16 threads each, rnd 16k writes, native aio: 501 write iops (70% HDD)
1 file, 16 threads, rnd 16k reads, native aio: 131 read iops (108% HDD)
16 files, 16 threads each, rnd 16k reads, native aio: 494 read iops (123% HDD)
HEREDOC
)
	
	myBaselineSSD=$(cat <<'HEREDOC'
TODO
HEREDOC
)
	
	# initialize aliases
	info() {
		# generic info printout function
		myLastinfo="$1"
		echo "$1"
	}
	error() {
		# generic error printout function
		if [ "$1" != "" ]; then
			err="$1"
		else
			err="$myLastinfo"
		fi;
		
		printf "$colorRed" >&2
		echo "$err failed on $myHostname @ $(date '+%Y-%m-%d %H:%M:%S')" >&2
		printf "$colorReset" >&2
		
		# defuse trap and exit
		trap "" EXIT
		exit 1
	}
	ignore() {
		# generic noop function to cancel set -e
		return 0
	}
	testlead() {
		# lead output for test result
		printf "%s" "$1"
	}
	testresult() {
		# result output
		printf "$colorGreen"
		printf "%s\n" "$1"
		printf "$colorReset"
	}
	baselineCompare() {
		# compare iops against a baseline comparison, echo result in percentage
		baselineCompareTestname="$1"
		baselineCompareRW="$2"
		baselineCompareContent="$3"
		baselineCompareIOPS="$4"
		
		if baselineCompareContent=$(echo "$baselineCompareContent" | grep "${testname}:" | grep " $baselineCompareRW iops"); then
			baselineCompareContent=$(echo "$baselineCompareContent" | sed "s/ $baselineCompareRW iops.*//")
			baselineCompareContent=$(echo "$baselineCompareContent" | rev | sed "s/ .*//" )
			baselineCompareContent=$(echo "$baselineCompareContent" | rev)
			
			baselineCompareResult=$(( 100 * baselineCompareIOPS / baselineCompareContent ))
		else
			baselineCompareResult=""
		fi;
		
		echo "$baselineCompareResult"
	}
	baselineFactor() {
		# fetch and output baseline comparison
		baselineFactorTestname="$1"
		baselineFactorRW="$2"
		baselineFactorIOPS="$3"
		
		baselineFactorResultHDD=$(baselineCompare "$baselineFactorTestname" "$baselineFactorRW" "$myBaselineHDD" "$baselineFactorIOPS")
		baselineFactorResultSSD=$(baselineCompare "$baselineFactorTestname" "$baselineFactorRW" "$myBaselineSSD" "$baselineFactorIOPS")
		
		if [ "$baselineFactorResultHDD" != "" ] && [ "$baselineFactorResultSSD" != "" ]; then
			echo " (${baselineFactorResultHDD}% HDD / ${baselineFactorResultSSD}% SSD)"
		elif [ "$baselineFactorResultHDD" != "" ]; then
			echo " (${baselineFactorResultHDD}% HDD)"
		elif [ "$baselineFactorResultSSD" != "" ]; then
			echo " (${baselineFactorResultSSD}% SSD)"
		else
			echo ""
		fi;
	}
	runFio() {
		# run fio and output iops in a nice to read fashion, pass most args to fio
		testname="$1"
		shift
		if [ "$mySpecificTest" != "" ] && [ "$mySpecificTest" != "$testname" ]; then
			# test not in selection
			return
		else
			# test in selection, inform it will be run
			myTestsrun=true
			if [ "$mySpecificTest" = "" ]; then
				testlead "$testname: "
			else
				info "Repeating \"$mySpecificTest\" in \"$myPath/$myDirname\" on $myHostname @ $(date '+%Y-%m-%d %H:%M:%S') ..."
				info "Full cmd: fio --output-format=terse --name=\"test\" $*"
				testlead "Result: "
			fi;

			# run test, cut and display iops
			iops=$(fio --output-format=terse --name="test" "$@") || error "Running test \"$testname\""
			iopsRead=$(printf "%s" "$iops" | cut -d ";" -f 8) || error "Reducing output to iops"
			iopsWrite=$(printf "%s" "$iops" | cut -d ";" -f 49) || error "Reducing output to iops"
			
			# perform baseline comparison
			iopsReadFactor=$(baselineFactor "$testname" "read" "$iopsRead")
			iopsWriteFactor=$(baselineFactor "$testname" "write" "$iopsWrite")
			
			if [ "$iopsRead" != "0" ] && [ "$iopsWrite" != "0" ]; then
				testresult "$iopsRead read iops$iopsReadFactor, $iopsWrite write iops$iopsWriteFactor"
			elif [ "$iopsRead" != "0" ]; then
				testresult "$iopsRead read iops$iopsReadFactor"
			elif [ "$iopsWrite" != "0" ]; then
				testresult "$iopsWrite write iops$iopsWriteFactor"
			else
				testresult "0 read iops, 0 write iops (FAIL!)"
			fi;
		fi;
	}
	
	if $myCleanup; then
		# remove test directory
		info "Cleanup"
		cd "$myPath" || error "Changing to workdir"
		[ -e "$myDirname/CACHEDIR.TAG" ] || error "Ensuring \"$myPath/$myDirname/CACHEDIR.TAG\" exists"
		rm -rf "$myDirname" || error "Deleting test directory"
		info "Done."
	else
		cd "$myPath" || error "Changing to workdir"
		
		# install fio if missing
		if ! command -v fio >/dev/null 2>&1; then
			info "Installing fio (requires root privileges)"
			if [ "$LOGNAME" != "root" ]; then
				error
			fi;
			
			# detect package manager
			# NOTE: cannot ask user y/n when in remote execution mode
			if [ -e "/usr/bin/apt-get" ]; then
				# debian package manager
				/usr/bin/apt-get -y install fio || error
			elif [ -e "/usr/bin/yum" ]; then
				# red hat package manager
				/usr/bin/yum -y install fio || error
			elif [ -e "/usr/sbin/pkg" ]; then
				# freebsd package manager
				ASSUME_ALWAYS_YES=YES /usr/sbin/pkg install fio || error
			elif [ -e "/usr/bin/pkg" ]; then
				# openindiana package manager
				/usr/bin/pkg install fio || error
			else
				error "Detecting install tool"
			fi;
		fi;
		
		# OS detection, set native AIO variant
		myOS="$(uname)"
		if [ "$myOS" = "Linux" ]; then
			fioAio="libaio"
		elif [ "$myOS" = "SunOS" ]; then
			fioAio="solarisaio"
		else
			# NOTE: no native AIO available for BSD!
			fioAio=""
		fi;
		
		# create test directory if missing
		if [ ! -e "$myDirname" ]; then
			if [ "$mySpecificTest" != "" ]; then
				info "Test directory must pre-exist to repeat a specific test"
				error "Re-using existing testdir"
			else
				info "Creating test directory \"$myDirname\""
				mkdir "$myDirname" || error
			fi;
		fi;
		
		cd "$myDirname" || error "Changing to test directory"
		
		echo "Signature: 8a477f597d28d172789f06886806bc55" > CACHEDIR.TAG || error "Marking test dir to be excluded from backups"
		
		if [ "$mySpecificTest" = "" ]; then
			info "Running tests in \"$myPath/$myDirname\" on $myHostname @ $(date '+%Y-%m-%d %H:%M:%S') ..."
		fi;
		info "storage-tuner-benchmark version $myVersion"
		
		info "Testgroup \"$STB_TESTGROUP\""
		if [ "$STB_TESTGROUP" = "current" ]; then
			# v2.0 testgroup - ready for ZFS
			# NOTE: to create better comparability, the use of "--direct=1" is now banned and cached reads are just what they are
			
			[ "$mySpecificTest" = "" ] && info "===   1 file series   ==="
			# this test also inits the test file, it must be run first in series
			runFio "1 file, 1 thread, seq 1M writes, simple"                 $fioOne        --ioengine=sync     --iodepth=1 --bs=1M    --rw=write --end_fsync=1
			runFio "1 file, 1 thread, rnd 16k writes, simple"                $fioOne $fioTL --ioengine=sync     --iodepth=1 --bs=16k   --rw=randwrite --fdatasync=1
			runFio "1 file, 1 thread, rnd 16k writes, simple, take 2"        $fioOne $fioTL --ioengine=sync     --iodepth=1 --bs=16k   --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 4k writes, posixaio"             $fioOne $fioTL --ioengine=posixaio --iodepth=16 --bs=4k   --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 8k writes, posixaio"             $fioOne $fioTL --ioengine=posixaio --iodepth=16 --bs=8k   --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 16k writes, posixaio"            $fioOne $fioTL --ioengine=posixaio --iodepth=16 --bs=16k  --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 16k writes, posixaio, take 2"    $fioOne $fioTL --ioengine=posixaio --iodepth=16 --bs=16k  --rw=randwrite --fdatasync=1
			
			[ "$mySpecificTest" = "" ] && info "===  16 file series   ==="
			# this test also inits the test files, it must be run first in series
			runFio "16 files, 1 thread each, seq 1M writes, simple"               $fioMany        --ioengine=sync      --iodepth=1  --bs=1M   --rw=write --end_fsync=1
			runFio "16 files, 1 thread each, rnd 16k writes, simple"              $fioMany $fioTL --ioengine=sync      --iodepth=1  --bs=16k  --rw=randwrite --fdatasync=1
			runFio "16 files, 1 thread each, rnd 16k writes, simple, take 2"      $fioMany $fioTL --ioengine=sync      --iodepth=1  --bs=16k  --rw=randwrite --fdatasync=1
			runFio "16 files, 1 thread each, rnd 16k writes, posixaio"            $fioMany $fioTL --ioengine=posixaio  --iodepth=1  --bs=16k  --rw=randwrite --fdatasync=1
			runFio "16 files, 16 threads each, rnd 16k writes, posixaio"          $fioMany $fioTL --ioengine=posixaio  --iodepth=16 --bs=16k  --rw=randwrite --fdatasync=1
			runFio "16 files, 16 threads each, rnd 16k writes, posixaio, take 2"  $fioMany $fioTL --ioengine=posixaio  --iodepth=16 --bs=16k  --rw=randwrite --fdatasync=1
			
			[ "$mySpecificTest" = "" ] && info "===   O_SYNC series   ==="
			runFio "1 file, 1 thread, rnd 16k writes, simple, o_sync"            $fioOne $fioTL --ioengine=sync      --iodepth=1  --bs=16k  --rw=randwrite --sync=1
			runFio "1 file, 16 threads, rnd 16k writes, posixaio, o_sync"        $fioOne $fioTL --ioengine=posixaio  --iodepth=16 --bs=16k  --rw=randwrite --sync=1
			runFio "16 files, 1 thread each, rnd 16k writes, simple, o_sync"     $fioMany $fioTL --ioengine=sync     --iodepth=1  --bs=16k  --rw=randwrite --sync=1
			runFio "16 files, 16 threads each, rnd 16k writes, posixaio, o_sync" $fioMany $fioTL --ioengine=posixaio --iodepth=16 --bs=16k  --rw=randwrite --sync=1
			
			# read tests, which are less meaningful
			[ "$mySpecificTest" = "" ] && info "===    read series    ==="
			runFio "1 file, 1 thread, seq 1M reads, simple"             $fioOne  $fioTL --ioengine=sync       --iodepth=1  --bs=1M   --rw=read     --invalidate=1
			runFio "1 file, 16 threads, rnd 16k reads, posixaio"        $fioOne  $fioTL --ioengine=posixaio   --iodepth=16 --bs=16k  --rw=randread --invalidate=1 --sync=1
			runFio "16 files, 1 thread each, seq 1M reads, simple"      $fioMany $fioTL --ioengine=sync       --iodepth=1  --bs=1M   --rw=read     --invalidate=1
			runFio "16 files, 1 thread each, rnd 16k reads, posixaio"   $fioMany $fioTL --ioengine=posixaio   --iodepth=1  --bs=16k  --rw=randread --invalidate=1 --sync=1
			runFio "16 files, 16 threads each, rnd 16k reads, posixaio" $fioMany $fioTL --ioengine=posixaio   --iodepth=16 --bs=16k  --rw=randread --invalidate=1 --sync=1
			
			# native aio tests - only on supported platforms
			if [ "$fioAio" != "" ]; then
				[ "$mySpecificTest" = "" ] && info "=== native aio series ==="
				runFio "1 file, 16 threads, rnd 16k writes, native aio"         $fioOne  $fioTL --ioengine=$fioAio  --iodepth=16 --bs=16k  --rw=randwrite --fdatasync=1
				runFio "16 files, 16 threads each, rnd 16k writes, native aio"  $fioMany $fioTL --ioengine=$fioAio  --iodepth=16 --bs=16k  --rw=randwrite --fdatasync=1
				runFio "1 file, 16 threads, rnd 16k reads, native aio"          $fioOne  $fioTL --ioengine=$fioAio  --iodepth=16 --bs=16k  --rw=randread --invalidate=1 --sync=1
				runFio "16 files, 16 threads each, rnd 16k reads, native aio"   $fioMany $fioTL --ioengine=$fioAio  --iodepth=16 --bs=16k  --rw=randread --invalidate=1 --sync=1
			else
				info "Skipping native aio tests, as they are not available on this platform ($myOS)"
			fi;
			
		elif [ "$STB_TESTGROUP" = "v1" ]; then
			# v1.1.0 synthetic group of tests
			
			# this test also inits the test files, it must be run first in series
			runFio "16 files, 1 thread each, seq 4M writes"            $fioMany        --ioengine=psync   --direct=0 --iodepth=1 --bs=4M  --rw=write --end_fsync=1
			runFio "16 files, 1 thread each, seq 4M reads, direct"     $fioMany $fioTL --ioengine=$fioAio  --direct=1 --iodepth=1 --bs=4M  --rw=read
			runFio "16 files, 1 thread each, rnd 4k reads, direct"     $fioMany $fioTL --ioengine=$fioAio  --direct=1 --iodepth=1 --bs=4k  --rw=randread
			runFio "16 files, 1 thread each, rnd 16k reads, direct"    $fioMany $fioTL --ioengine=$fioAio  --direct=1 --iodepth=1 --bs=16k --rw=randread
			runFio "16 files, 1 thread each, rnd 4k writes, direct"    $fioMany $fioTL --ioengine=$fioAio  --direct=1 --iodepth=1 --bs=4k  --rw=randwrite --fdatasync=1
			runFio "16 files, 1 thread each, rnd 16k writes, direct"   $fioMany $fioTL --ioengine=$fioAio  --direct=1 --iodepth=1 --bs=16k --rw=randwrite --fdatasync=1
			
			# this test also inits the test file, it must be run first in series
			runFio "1 file, 1 thread, seq 4M writes"                   $fioOne        --ioengine=psync    --direct=0 --iodepth=1  --bs=4M  --rw=write --end_fsync=1
			runFio "1 file, 1 thread, seq 4M reads, direct"            $fioOne $fioTL --ioengine=$fioAio   --direct=1 --iodepth=1  --bs=4M  --rw=read 
			runFio "1 file, 16 threads, rnd 16k writes"                $fioOne $fioTL --ioengine=psync    --direct=0 --iodepth=16 --bs=16k --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 16k writes, direct"        $fioOne $fioTL --ioengine=$fioAio   --direct=1 --iodepth=16 --bs=16k --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 16k readwrites, direct"    $fioOne $fioTL --ioengine=$fioAio   --direct=1 --iodepth=16 --bs=16k --rw=randrw    --fdatasync=1
			runFio "1 file, 16 threads, rnd 16k writes, mmap"          $fioOne $fioTL --ioengine=mmap     --direct=1 --iodepth=16 --bs=16k --rw=randwrite --fdatasync=1
			runFio "1 file, 16 threads, rnd 16k writes, posixaio"      $fioOne $fioTL --ioengine=posixaio --direct=1 --iodepth=16 --bs=16k --rw=randwrite --fdatasync=1
			
			runFio "1 file, 1 thread, rnd 16k writes"                  $fioOne $fioTL --ioengine=psync    --direct=0 --iodepth=1  --bs=16k --rw=randwrite --fdatasync=1
			runFio "1 file, 1 thread, rnd 16k writes, direct"          $fioOne $fioTL --ioengine=$fioAio   --direct=1 --iodepth=1  --bs=16k --rw=randwrite --fdatasync=1
			runFio "1 file, 1 thread, rnd 16k readwrites, direct"      $fioOne $fioTL --ioengine=$fioAio   --direct=1 --iodepth=1  --bs=16k --rw=randrw    --fdatasync=1
		else
			error "Finding testgroup \"$STB_TESTGROUP\""
		fi;
		
		if [ "$mySpecificTest" = "" ]; then
			info "Tests complete on $myHostname @ $(date '+%Y-%m-%d %H:%M:%S')."
			info "Files remain. To clean up, add argument \"cleanup\"."
		else
			if ! $myTestsrun; then
				error "Looking up test \"$mySpecificTest\""
			else
				info "Test complete on $myHostname @ $(date '+%Y-%m-%d %H:%M:%S')."
			fi;
		fi;
	fi;
	# defuse trap and exit
	trap "" EXIT
	exit 0
fi;
}
exit
